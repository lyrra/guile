name: CI_Windows_msys2_mingw64

on:
  schedule:
    - cron: '0 4 */7 * *'
  workflow_dispatch:
    inputs:
      build_mode:
        description: 'Build mode: devel_build, stable_build'
        required: true
        default: 'devel_build'

jobs:
  build_x64:
    runs-on: windows-latest
    steps:
    # An alternative to using the msys2 action (from https://github.com/marketplace/actions/setup-msys2),
    # would be to do it manually: download msys2 from https://github.com/msys2/msys2-installer/releases/tag/nightly-x86_64
    - uses: msys2/setup-msys2@v2
      with:
        msystem: mingw64
        update: true
        install: >-
          base-devel
          zip
          git
          gettext-devel
          mingw-w64-x86_64-autotools
          mingw-w64-x86_64-libtool
          mingw-w64-x86_64-toolchain
          mingw-w64-x86_64-gettext
          mingw-w64-x86_64-gnutls
          mingw-w64-x86_64-gc
          mingw-w64-x86_64-libffi
          mingw-w64-x86_64-libgcrypt
          mingw-w64-x86_64-libtasn1
          mingw-w64-x86_64-lz4
          mingw-w64-x86_64-pcre2
          mingw-w64-x86_64-readline
    - name: Clone repo repoinfo
      uses: actions/checkout@v3
      with:
        ref: repoinfo
        path: r
    - name: Clone repo wip-mingw
      uses: actions/checkout@v3
      with:
        ref: wip-mingw
        path: m
    - name: Autogen
      shell: msys2 {0}
      run: |
        cd m
        ./autogen.sh
    - name: Configure
      shell: msys2 {0}
      run: |
        cd m
        GITSRCDIR=. ../r/build/ci/tools/configure_guile.sh
    - name: Build_libguile
      shell: msys2 {0}
      run: |
        cd m
        GITSRCDIR=. ../r/build/ci/tools/build_guile_libguile.sh
    - name: Build-1
      shell: msys2 {0}
      run: |
        cd m
        GITSRCDIR=. ../r/build/ci/tools/build_guile.sh
    - name: Build-2
      shell: msys2 {0}
      run: |
        cd m
        GITSRCDIR=. ../r/build/ci/tools/build_guile.sh
    - name: Build-3
      shell: msys2 {0}
      run: |
        cd m
        GITSRCDIR=. ../r/build/ci/tools/build_guile.sh
    - name: Build-4
      shell: msys2 {0}
      run: |
        cd m
        GITSRCDIR=. ../r/build/ci/tools/build_guile.sh
    - name: Build-5
      shell: msys2 {0}
      run: |
        cd m
        GITSRCDIR=. ../r/build/ci/tools/build_guile.sh
    - name: Build-6
      shell: msys2 {0}
      run: |
        cd m
        GITSRCDIR=. ../r/build/ci/tools/build_guile.sh
    - name: Build-7
      shell: msys2 {0}
      run: |
        cd m
        GITSRCDIR=. ../r/build/ci/tools/build_guile.sh
    - name: Build-8
      shell: msys2 {0}
      run: |
        cd m
        GITSRCDIR=. ../r/build/ci/tools/build_guile.sh
    - name: Package
      shell: msys2 {0}
      run: |
        cd m
        ../r/build/ci/tools/package_mingw.sh
    - uses: actions/upload-artifact@v3
      with:
        name:   mingw-w64-x86_64-guile3-3.0.5-1-any
        path: m/mingw-w64-x86_64-guile3-3.0.5-1-any.pkg.tar.zst
    - uses: actions/upload-artifact@v3
      with:
        name: mingw-w64-guile3
        path: m/guile-3-mingw64.zip
    - name: version
      run: echo "::set-output name=version::$(date +%Y%m%d-%H%M)"
      id: version
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: release-mingw-${{ steps.version.outputs.version }}
        release_name: mingw-${{ steps.version.outputs.version }}
        draft: false
        prerelease: false
    - name: Upload Release
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`.
        # See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: m/mingw-w64-x86_64-guile3-3.0.5-1-any.pkg.tar.zst
        asset_name:   mingw-w64-x86_64-guile3-3.0.5-1-any.pkg.tar.zst
        asset_content_type: application/zip
  upload:
    permissions:
      contents: write
    needs:
      - build_x64
    if: github.ref == 'refs/heads/repoinfo'
    runs-on: windows-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: mingw-w64-guile3
      - name: Upload Release nightly
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          ls
          ls f
          ls m
          gh release upload nightly-mingw mingw* --clobber -R ${{ github.repository }}

